/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  HeimdallProtocol,
  HeimdallProtocolInterface,
} from "../HeimdallProtocol";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_verifierAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "organization",
        type: "string",
      },
      {
        indexed: false,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "deviceAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isPublic",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "address[]",
        name: "authorizedUsers",
        type: "address[]",
      },
    ],
    name: "DeviceAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_organization",
        type: "string",
      },
      {
        internalType: "address",
        name: "_owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "_deviceAddress",
        type: "address",
      },
      {
        internalType: "bool",
        name: "_isPublic",
        type: "bool",
      },
      {
        internalType: "address[]",
        name: "_authorizedUsers",
        type: "address[]",
      },
    ],
    name: "addDevice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllDevices",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "organization",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "deviceAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isPublic",
            type: "bool",
          },
          {
            internalType: "address[]",
            name: "authorizedUsers",
            type: "address[]",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
        ],
        internalType: "struct HeimdallProtocol.Device[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_deviceAddress",
        type: "address",
      },
    ],
    name: "getDevice",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "organization",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "deviceAddress",
            type: "address",
          },
          {
            internalType: "bool",
            name: "isPublic",
            type: "bool",
          },
          {
            internalType: "address[]",
            name: "authorizedUsers",
            type: "address[]",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
          {
            internalType: "bool",
            name: "exists",
            type: "bool",
          },
        ],
        internalType: "struct HeimdallProtocol.Device",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDevicesCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_deviceAddress",
        type: "address",
      },
    ],
    name: "isDeviceMinted",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_deviceAddress",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_lowerBound",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_upperBound",
        type: "uint256",
      },
    ],
    name: "verifyProof",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620027003803806200270083398101604081905262000034916200016d565b604080518082018252601181527012195a5b59185b1b08141c9bdd1bd8dbdb607a1b602080830191825283518085019094526002845261048560f41b9084015281519192916200008791600091620000c7565b5080516200009d906001906020840190620000c7565b5050600a80546001600160a01b0319166001600160a01b03939093169290921790915550620001dc565b828054620000d5906200019f565b90600052602060002090601f016020900481019282620000f9576000855562000144565b82601f106200011457805160ff191683800117855562000144565b8280016001018555821562000144579182015b828111156200014457825182559160200191906001019062000127565b506200015292915062000156565b5090565b5b8082111562000152576000815560010162000157565b6000602082840312156200018057600080fd5b81516001600160a01b03811681146200019857600080fd5b9392505050565b600181811c90821680620001b457607f821691505b60208210811415620001d657634e487b7160e01b600052602260045260246000fd5b50919050565b61251480620001ec6000396000f3fe608060405234801561001057600080fd5b50600436106101205760003560e01c80636c3a0355116100ad578063a2474cf911610071578063a2474cf914610267578063afa09ae81461027a578063b88d4fde146102a9578063c87b56dd146102bc578063e985e9c5146102cf57600080fd5b80636c3a03551461021257806370a08231146102245780637a2a530d1461023757806395d89b411461024c578063a22cb4651461025457600080fd5b8063095ea7b3116100f4578063095ea7b3146101b157806323b872dd146101c657806330128307146101d957806342842e0e146101ec5780636352211e146101ff57600080fd5b8062d553181461012557806301ffc9a71461014e57806306fdde0314610171578063081812fc14610186575b600080fd5b610138610133366004611b92565b61030b565b6040516101459190611cf4565b60405180910390f35b61016161015c366004611d1d565b61054c565b6040519015158152602001610145565b61017961055d565b6040516101459190611d3a565b610199610194366004611d4d565b6105ef565b6040516001600160a01b039091168152602001610145565b6101c46101bf366004611d66565b610616565b005b6101c46101d4366004611d90565b610731565b6101c46101e7366004611e99565b610762565b6101c46101fa366004611d90565b610a34565b61019961020d366004611d4d565b610a4f565b6009545b604051908152602001610145565b610216610232366004611b92565b610aaf565b61023f610b35565b6040516101459190611fc0565b610179610d72565b6101c4610262366004612022565b610d81565b610161610275366004612059565b610d90565b610161610288366004611b92565b6001600160a01b031660009081526007602052604090206006015460ff1690565b6101c46102b73660046120eb565b610fc6565b6101796102ca366004611d4d565b610ffe565b6101616102dd366004612167565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b604080516101008101825260608082526020820181905260009282018390528082018390526080820183905260a082015260c0810182905260e08101919091526001600160a01b038216600090815260076020526040908190208151610100810190925280548290829061037e9061219a565b80601f01602080910402602001604051908101604052809291908181526020018280546103aa9061219a565b80156103f75780601f106103cc576101008083540402835291602001916103f7565b820191906000526020600020905b8154815290600101906020018083116103da57829003601f168201915b505050505081526020016001820180546104109061219a565b80601f016020809104026020016040519081016040528092919081815260200182805461043c9061219a565b80156104895780601f1061045e57610100808354040283529160200191610489565b820191906000526020600020905b81548152906001019060200180831161046c57829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003840154918216604080850191909152600160a01b90920460ff1615156060840152600484018054835181840281018401909452808452608090940193909183018282801561052357602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610505575b50505091835250506005820154602082015260069091015460ff16151560409091015292915050565b600061055782611009565b92915050565b60606000805461056c9061219a565b80601f01602080910402602001604051908101604052809291908181526020018280546105989061219a565b80156105e55780601f106105ba576101008083540402835291602001916105e5565b820191906000526020600020905b8154815290600101906020018083116105c857829003601f168201915b5050505050905090565b60006105fa82611059565b506000908152600460205260409020546001600160a01b031690565b600061062182610a4f565b9050806001600160a01b0316836001600160a01b031614156106945760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806106b057506106b081336102dd565b6107225760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000606482015260840161068b565b61072c83836110bb565b505050565b61073b3382611129565b6107575760405162461bcd60e51b815260040161068b906121d5565b61072c8383836111a8565b600042448660405160200161079c93929190928352602083019190915260601b6bffffffffffffffffffffffff1916604082015260540190565b60408051601f198184030181528282528051602091820120610100840183528a84528382018a90526001600160a01b03808a1685850152881660608501819052871515608086015260a0850187905260c08501829052600160e086015260009081526007835292909220835180519395508493919261082092849290910190611a88565b5060208281015180516108399260018501920190611a88565b5060408201516002820180546001600160a01b0319166001600160a01b0392831617905560608301516003830180546080860151929093166001600160a81b031990931692909217600160a01b9115159190910217905560a082015180516108ab916004840191602090910190611b0c565b5060c0820151600582015560e0909101516006909101805491151560ff19909216919091179055600880546001810182556000919091528151805183926007027ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee3019161091d91839160200190611a88565b5060208281015180516109369260018501920190611a88565b5060408201516002820180546001600160a01b0319166001600160a01b0392831617905560608301516003830180546080860151929093166001600160a81b031990931692909217600160a01b9115159190910217905560a082015180516109a8916004840191602090910190611b0c565b5060c0820151600582015560e0909101516006909101805460ff19169115159190911790556009546109db908790611319565b6109e9600980546001019055565b7f93b297980fb8516c58978ba40113f05647ca558fb95435558003c6d998ec6cc4888888888888604051610a2296959493929190612222565b60405180910390a15050505050505050565b61072c83838360405180602001604052806000815250610fc6565b6000818152600260205260408120546001600160a01b0316806105575760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161068b565b60006001600160a01b038216610b195760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840161068b565b506001600160a01b031660009081526003602052604090205490565b60606008805480602002602001604051908101604052809291908181526020016000905b82821015610d69578382906000526020600020906007020160405180610100016040529081600082018054610b8d9061219a565b80601f0160208091040260200160405190810160405280929190818152602001828054610bb99061219a565b8015610c065780601f10610bdb57610100808354040283529160200191610c06565b820191906000526020600020905b815481529060010190602001808311610be957829003601f168201915b50505050508152602001600182018054610c1f9061219a565b80601f0160208091040260200160405190810160405280929190818152602001828054610c4b9061219a565b8015610c985780601f10610c6d57610100808354040283529160200191610c98565b820191906000526020600020905b815481529060010190602001808311610c7b57829003601f168201915b505050918352505060028201546001600160a01b039081166020808401919091526003840154918216604080850191909152600160a01b90920460ff16151560608401526004840180548351818402810184019094528084526080909401939091830182828015610d3257602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610d14575b5050509183525050600582015460208083019190915260069092015460ff1615156040909101529082526001929092019101610b59565b50505050905090565b60606001805461056c9061219a565b610d8c338383611333565b5050565b6001600160a01b0385166000908152600760205260408120600301543390600160a01b900460ff16610e92576000805b6001600160a01b038916600090815260076020526040902060040154811015610e4b576001600160a01b03898116600090815260076020526040902060040180549185169183908110610e1557610e156122b2565b6000918252602090912001546001600160a01b03161415610e395760019150610e4b565b80610e43816122de565b915050610dc0565b5080610e905760405162461bcd60e51b81526020600482015260146024820152732ab9b2b9103737ba1030baba3437b934bd32b21760611b604482015260640161068b565b505b6040805160028082526060820183526000926020830190803683370190505090508460001b81600081518110610eca57610eca6122b2565b6020026020010181815250508360001b81600181518110610eed57610eed6122b2565b6020908102919091010152600a54604051633a94343960e21b81526001600160a01b039091169063ea50d0e490610f2c908a908a9086906004016122f9565b60206040518083038186803b158015610f4457600080fd5b505afa158015610f58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7c9190612372565b610fb85760405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b604482015260640161068b565b506001979650505050505050565b610fd03383611129565b610fec5760405162461bcd60e51b815260040161068b906121d5565b610ff884848484611402565b50505050565b606061055782611435565b60006001600160e01b031982166380ac58cd60e01b148061103a57506001600160e01b03198216635b5e139f60e01b145b8061055757506301ffc9a760e01b6001600160e01b0319831614610557565b6000818152600260205260409020546001600160a01b03166110b85760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604482015260640161068b565b50565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906110f082610a4f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061113583610a4f565b9050806001600160a01b0316846001600160a01b0316148061117c57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806111a05750836001600160a01b0316611195846105ef565b6001600160a01b0316145b949350505050565b826001600160a01b03166111bb82610a4f565b6001600160a01b0316146111e15760405162461bcd60e51b815260040161068b9061238f565b6001600160a01b0382166112435760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161068b565b611250838383600161153e565b826001600160a01b031661126382610a4f565b6001600160a01b0316146112895760405162461bcd60e51b815260040161068b9061238f565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610d8c8282604051806020016040528060008152506115c6565b816001600160a01b0316836001600160a01b031614156113955760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604482015260640161068b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b61140d8484846111a8565b611419848484846115f9565b610ff85760405162461bcd60e51b815260040161068b906123d4565b606061144082611059565b600082815260066020526040812080546114599061219a565b80601f01602080910402602001604051908101604052809291908181526020018280546114859061219a565b80156114d25780601f106114a7576101008083540402835291602001916114d2565b820191906000526020600020905b8154815290600101906020018083116114b557829003601f168201915b5050505050905060006114f060408051602081019091526000815290565b9050805160001415611503575092915050565b81511561153557808260405160200161151d929190612426565b60405160208183030381529060405292505050919050565b6111a084611706565b6001811115610ff8576001600160a01b03841615611584576001600160a01b0384166000908152600360205260408120805483929061157e908490612455565b90915550505b6001600160a01b03831615610ff8576001600160a01b038316600090815260036020526040812080548392906115bb90849061246c565b909155505050505050565b6115d0838361177a565b6115dd60008484846115f9565b61072c5760405162461bcd60e51b815260040161068b906123d4565b60006001600160a01b0384163b156116fb57604051630a85bd0160e11b81526001600160a01b0385169063150b7a029061163d903390899088908890600401612484565b602060405180830381600087803b15801561165757600080fd5b505af1925050508015611687575060408051601f3d908101601f19168201909252611684918101906124c1565b60015b6116e1573d8080156116b5576040519150601f19603f3d011682016040523d82523d6000602084013e6116ba565b606091505b5080516116d95760405162461bcd60e51b815260040161068b906123d4565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506111a0565b506001949350505050565b606061171182611059565b600061172860408051602081019091526000815290565b905060008151116117485760405180602001604052806000815250611773565b8061175284611913565b604051602001611763929190612426565b6040516020818303038152906040525b9392505050565b6001600160a01b0382166117d05760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161068b565b6000818152600260205260409020546001600160a01b0316156118355760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161068b565b61184360008383600161153e565b6000818152600260205260409020546001600160a01b0316156118a85760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161068b565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60606000611920836119b0565b600101905060008167ffffffffffffffff81111561194057611940611dcc565b6040519080825280601f01601f19166020018201604052801561196a576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a85049450846119a3576119a8565b611974565b509392505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106119ef5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611a1b576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611a3957662386f26fc10000830492506010015b6305f5e1008310611a51576305f5e100830492506008015b6127108310611a6557612710830492506004015b60648310611a77576064830492506002015b600a83106105575760010192915050565b828054611a949061219a565b90600052602060002090601f016020900481019282611ab65760008555611afc565b82601f10611acf57805160ff1916838001178555611afc565b82800160010185558215611afc579182015b82811115611afc578251825591602001919060010190611ae1565b50611b08929150611b61565b5090565b828054828255906000526020600020908101928215611afc579160200282015b82811115611afc57825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190611b2c565b5b80821115611b085760008155600101611b62565b80356001600160a01b0381168114611b8d57600080fd5b919050565b600060208284031215611ba457600080fd5b61177382611b76565b60005b83811015611bc8578181015183820152602001611bb0565b83811115610ff85750506000910152565b60008151808452611bf1816020860160208601611bad565b601f01601f19169290920160200192915050565b600081518084526020808501945080840160005b83811015611c3e5781516001600160a01b031687529582019590820190600101611c19565b509495945050505050565b60006101008251818552611c5f82860182611bd9565b91505060208301518482036020860152611c798282611bd9565b91505060018060a01b0360408401511660408501526060830151611ca860608601826001600160a01b03169052565b506080830151611cbc608086018215159052565b5060a083015184820360a0860152611cd48282611c05565b91505060c083015160c085015260e08301516119a860e086018215159052565b6020815260006117736020830184611c49565b6001600160e01b0319811681146110b857600080fd5b600060208284031215611d2f57600080fd5b813561177381611d07565b6020815260006117736020830184611bd9565b600060208284031215611d5f57600080fd5b5035919050565b60008060408385031215611d7957600080fd5b611d8283611b76565b946020939093013593505050565b600080600060608486031215611da557600080fd5b611dae84611b76565b9250611dbc60208501611b76565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611e0b57611e0b611dcc565b604052919050565b600067ffffffffffffffff831115611e2d57611e2d611dcc565b611e40601f8401601f1916602001611de2565b9050828152838383011115611e5457600080fd5b828260208301376000602084830101529392505050565b600082601f830112611e7c57600080fd5b61177383833560208501611e13565b80151581146110b857600080fd5b60008060008060008060c08789031215611eb257600080fd5b863567ffffffffffffffff80821115611eca57600080fd5b611ed68a838b01611e6b565b9750602091508189013581811115611eed57600080fd5b611ef98b828c01611e6b565b975050611f0860408a01611b76565b9550611f1660608a01611b76565b94506080890135611f2681611e8b565b935060a089013581811115611f3a57600080fd5b8901601f81018b13611f4b57600080fd5b803582811115611f5d57611f5d611dcc565b8060051b9250611f6e848401611de2565b818152928201840192848101908d851115611f8857600080fd5b928501925b84841015611fad57611f9e84611b76565b82529285019290850190611f8d565b8096505050505050509295509295509295565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561201557603f19888603018452612003858351611c49565b94509285019290850190600101611fe7565b5092979650505050505050565b6000806040838503121561203557600080fd5b61203e83611b76565b9150602083013561204e81611e8b565b809150509250929050565b60008060008060006080868803121561207157600080fd5b61207a86611b76565b9450602086013567ffffffffffffffff8082111561209757600080fd5b818801915088601f8301126120ab57600080fd5b8135818111156120ba57600080fd5b8960208285010111156120cc57600080fd5b9699602092909201985095966040810135965060600135945092505050565b6000806000806080858703121561210157600080fd5b61210a85611b76565b935061211860208601611b76565b925060408501359150606085013567ffffffffffffffff81111561213b57600080fd5b8501601f8101871361214c57600080fd5b61215b87823560208401611e13565b91505092959194509250565b6000806040838503121561217a57600080fd5b61218383611b76565b915061219160208401611b76565b90509250929050565b600181811c908216806121ae57607f821691505b602082108114156121cf57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60c08152600061223560c0830189611bd9565b602083820381850152612248828a611bd9565b6001600160a01b0389811660408701528881166060870152871515608087015285820360a087015286518083528388019450909183019060005b818110156122a0578551841683529484019491840191600101612282565b50909c9b505050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156122f2576122f26122c8565b5060010190565b60408152826040820152828460608301376000606084830101526000601f19601f8501168201606081016020606085840301818601528186518084526080850191508288019450600093505b808410156123655784518252938201936001939093019290820190612345565b5098975050505050505050565b60006020828403121561238457600080fd5b815161177381611e8b565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60008351612438818460208801611bad565b83519083019061244c818360208801611bad565b01949350505050565b600082821015612467576124676122c8565b500390565b6000821982111561247f5761247f6122c8565b500190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906124b790830184611bd9565b9695505050505050565b6000602082840312156124d357600080fd5b815161177381611d0756fea2646970667358221220c88e06ac81b1f847d1353bff05cff02e7ba82d781f4ee527ce42df0ec2148d8264736f6c63430008090033";

type HeimdallProtocolConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: HeimdallProtocolConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class HeimdallProtocol__factory extends ContractFactory {
  constructor(...args: HeimdallProtocolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "HeimdallProtocol";
  }

  deploy(
    _verifierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<HeimdallProtocol> {
    return super.deploy(
      _verifierAddress,
      overrides || {}
    ) as Promise<HeimdallProtocol>;
  }
  getDeployTransaction(
    _verifierAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_verifierAddress, overrides || {});
  }
  attach(address: string): HeimdallProtocol {
    return super.attach(address) as HeimdallProtocol;
  }
  connect(signer: Signer): HeimdallProtocol__factory {
    return super.connect(signer) as HeimdallProtocol__factory;
  }
  static readonly contractName: "HeimdallProtocol";
  public readonly contractName: "HeimdallProtocol";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): HeimdallProtocolInterface {
    return new utils.Interface(_abi) as HeimdallProtocolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): HeimdallProtocol {
    return new Contract(address, _abi, signerOrProvider) as HeimdallProtocol;
  }
}
