import { FileManager } from './noir/file-manager/file-manager';
import { createNodejsFileManager } from './noir/file-manager/nodejs-file-manager';
import { LogFn } from './utils';
import { ContractCompilationArtifacts, ProgramCompilationArtifacts } from './types/noir_artifact';
import { inflateDebugSymbols } from './noir/debug';
/**
 * Compiles a Noir project
 *
 * @param fileManager - The file manager to use
 * @param projectPath - The path to the project inside the file manager. Defaults to the root of the file manager
 * @param logFn - A logging function. If not provided, console.log will be used
 * @param debugLogFn - A debug logging function. If not provided, logFn will be used
 *
 * @example
 * ```typescript
 * // Node.js
 *
 * import { compile_program, createFileManager } from '@noir-lang/noir_wasm';
 *
 * const fm = createFileManager(myProjectPath);
 * const myCompiledCode = await compile_program(fm);
 * ```
 *
 * ```typescript
 * // Browser
 *
 * import { compile_program, createFileManager } from '@noir-lang/noir_wasm';
 *
 * const fm = createFileManager('/');
 * for (const path of files) {
 *   await fm.writeFile(path, await getFileAsStream(path));
 * }
 * const myCompiledCode = await compile_program(fm);
 * ```
 */
declare function compile_program(fileManager: FileManager, projectPath?: string, logFn?: LogFn, debugLogFn?: LogFn): Promise<ProgramCompilationArtifacts>;
/**
 * Compiles a Noir project
 *
 * @param fileManager - The file manager to use
 * @param projectPath - The path to the project inside the file manager. Defaults to the root of the file manager
 * @param logFn - A logging function. If not provided, console.log will be used
 * @param debugLogFn - A debug logging function. If not provided, logFn will be used
 *
 * @example
 * ```typescript
 * // Node.js
 *
 * import { compile_contract, createFileManager } from '@noir-lang/noir_wasm';
 *
 * const fm = createFileManager(myProjectPath);
 * const myCompiledCode = await compile_contract(fm);
 * ```
 *
 * ```typescript
 * // Browser
 *
 * import { compile_contract, createFileManager } from '@noir-lang/noir_wasm';
 *
 * const fm = createFileManager('/');
 * for (const path of files) {
 *   await fm.writeFile(path, await getFileAsStream(path));
 * }
 * const myCompiledCode = await compile_contract(fm);
 * ```
 */
declare function compile_contract(fileManager: FileManager, projectPath?: string, logFn?: LogFn, debugLogFn?: LogFn): Promise<ContractCompilationArtifacts>;
declare const createFileManager: typeof createNodejsFileManager;
export { compile_program as compile, compile_program, compile_contract, createFileManager, inflateDebugSymbols, ProgramCompilationArtifacts, ContractCompilationArtifacts, };
