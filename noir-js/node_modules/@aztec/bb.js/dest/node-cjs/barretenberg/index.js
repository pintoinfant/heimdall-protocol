"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BarretenbergSync = exports.Barretenberg = void 0;
const tslib_1 = require("tslib");
const comlink_1 = require("comlink");
const index_js_1 = require("../barretenberg_api/index.js");
const index_js_2 = require("../barretenberg_wasm/barretenberg_wasm_main/factory/node/index.js");
const index_js_3 = require("../barretenberg_wasm/barretenberg_wasm_main/index.js");
const index_js_4 = require("../barretenberg_wasm/helpers/index.js");
const index_js_5 = require("../barretenberg_wasm/index.js");
const debug_1 = tslib_1.__importDefault(require("debug"));
const debug = (0, debug_1.default)('bb.js:wasm');
/**
 * The main class library consumers interact with.
 * It extends the generated api, and provides a static constructor "new" to compose components.
 */
class Barretenberg extends index_js_1.BarretenbergApi {
    constructor(worker, wasm) {
        super(wasm);
        this.worker = worker;
    }
    /**
     * Constructs an instance of Barretenberg.
     * Launches it within a worker. This is necessary as it blocks waiting on child threads to complete,
     * and blocking the main thread in the browser is not allowed.
     * It threads > 1 (defaults to hardware availability), child threads will be created on their own workers.
     */
    static async new({ threads: desiredThreads, memory } = {}) {
        const worker = (0, index_js_2.createMainWorker)();
        const wasm = (0, index_js_4.getRemoteBarretenbergWasm)(worker);
        const { module, threads } = await (0, index_js_5.fetchModuleAndThreads)(desiredThreads);
        await wasm.init(module, threads, (0, comlink_1.proxy)(debug), memory?.initial, memory?.maximum);
        return new Barretenberg(worker, wasm);
    }
    async getNumThreads() {
        return await this.wasm.getNumThreads();
    }
    async destroy() {
        await this.wasm.destroy();
        await this.worker.terminate();
    }
}
exports.Barretenberg = Barretenberg;
let barretenbergSyncSingleton;
let barretenbergSyncSingletonPromise;
class BarretenbergSync extends index_js_1.BarretenbergApiSync {
    constructor(wasm) {
        super(wasm);
    }
    static async new() {
        const wasm = new index_js_3.BarretenbergWasmMain();
        const { module, threads } = await (0, index_js_5.fetchModuleAndThreads)(1);
        await wasm.init(module, threads);
        return new BarretenbergSync(wasm);
    }
    static initSingleton() {
        if (!barretenbergSyncSingletonPromise) {
            barretenbergSyncSingletonPromise = BarretenbergSync.new().then(s => (barretenbergSyncSingleton = s));
        }
        return barretenbergSyncSingletonPromise;
    }
    static getSingleton() {
        if (!barretenbergSyncSingleton) {
            throw new Error('First call BarretenbergSync.initSingleton() on @aztec/bb.js module.');
        }
        return barretenbergSyncSingleton;
    }
    getWasm() {
        return this.wasm;
    }
}
exports.BarretenbergSync = BarretenbergSync;
// If we're in ESM environment, use top level await. CJS users need to call it manually.
// Need to ignore for cjs build.
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYmFycmV0ZW5iZXJnL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxxQ0FBZ0M7QUFDaEMsMkRBQW9GO0FBQ3BGLGdHQUFxRztBQUNyRyxtRkFBd0g7QUFDeEgsb0VBQWtGO0FBQ2xGLDREQUE4RjtBQUM5RiwwREFBZ0M7QUFFaEMsTUFBTSxLQUFLLEdBQUcsSUFBQSxlQUFXLEVBQUMsWUFBWSxDQUFDLENBQUM7QUFPeEM7OztHQUdHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsMEJBQWU7SUFDL0MsWUFBNEIsTUFBVyxFQUFFLElBQTRCO1FBQ25FLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQURjLFdBQU0sR0FBTixNQUFNLENBQUs7SUFFdkMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sS0FBcUIsRUFBRTtRQUN2RSxNQUFNLE1BQU0sR0FBRyxJQUFBLDJCQUFnQixHQUFFLENBQUM7UUFDbEMsTUFBTSxJQUFJLEdBQUcsSUFBQSxvQ0FBeUIsRUFBNkIsTUFBTSxDQUFDLENBQUM7UUFDM0UsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxNQUFNLElBQUEsZ0NBQXFCLEVBQUMsY0FBYyxDQUFDLENBQUM7UUFDeEUsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsSUFBQSxlQUFLLEVBQUMsS0FBSyxDQUFDLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakYsT0FBTyxJQUFJLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELEtBQUssQ0FBQyxhQUFhO1FBQ2pCLE9BQU8sTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxLQUFLLENBQUMsT0FBTztRQUNYLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUMxQixNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDaEMsQ0FBQztDQUNGO0FBM0JELG9DQTJCQztBQUVELElBQUkseUJBQTJDLENBQUM7QUFDaEQsSUFBSSxnQ0FBMkQsQ0FBQztBQUVoRSxNQUFhLGdCQUFpQixTQUFRLDhCQUFtQjtJQUN2RCxZQUFvQixJQUEwQjtRQUM1QyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHO1FBQ2QsTUFBTSxJQUFJLEdBQUcsSUFBSSwrQkFBb0IsRUFBRSxDQUFDO1FBQ3hDLE1BQU0sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEdBQUcsTUFBTSxJQUFBLGdDQUFxQixFQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDakMsT0FBTyxJQUFJLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxNQUFNLENBQUMsYUFBYTtRQUNsQixJQUFJLENBQUMsZ0NBQWdDLEVBQUUsQ0FBQztZQUN0QyxnQ0FBZ0MsR0FBRyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLHlCQUF5QixHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkcsQ0FBQztRQUNELE9BQU8sZ0NBQWdDLENBQUM7SUFDMUMsQ0FBQztJQUVELE1BQU0sQ0FBQyxZQUFZO1FBQ2pCLElBQUksQ0FBQyx5QkFBeUIsRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztRQUN6RixDQUFDO1FBQ0QsT0FBTyx5QkFBeUIsQ0FBQztJQUNuQyxDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0Y7QUE3QkQsNENBNkJDO0FBRUQsd0ZBQXdGO0FBQ3hGLGdDQUFnQztBQUNoQyw2REFBNkQ7QUFDN0QsYUFBYTtBQUNiLE1BQU0sZ0JBQWdCLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQyx1QkFBdUIifQ==