"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BarretenbergApiSync = exports.BarretenbergApi = void 0;
const index_js_1 = require("../serialize/index.js");
const index_js_2 = require("../types/index.js");
class BarretenbergApi {
    constructor(wasm) {
        this.wasm = wasm;
    }
    async pedersenCommit(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = await this.wasm.callWasmExport('pedersen_commit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHash(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHashes(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async pedersenHashBuffer(inputBuffer, hashIndex) {
        const inArgs = [inputBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('pedersen_hash_buffer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidonHash(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('poseidon_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async poseidonHashes(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('poseidon_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async blake2s(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32];
        const result = await this.wasm.callWasmExport('blake2s', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async blake2sToField(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = await this.wasm.callWasmExport('blake2s_to_field_', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async schnorrComputePublicKey(privateKey) {
        const inArgs = [privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = await this.wasm.callWasmExport('schnorr_compute_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async schnorrNegatePublicKey(publicKeyBuffer) {
        const inArgs = [publicKeyBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = await this.wasm.callWasmExport('schnorr_negate_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async schnorrConstructSignature(message, privateKey) {
        const inArgs = [message, privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32, index_js_2.Buffer32];
        const result = await this.wasm.callWasmExport('schnorr_construct_signature', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async schnorrVerifySignature(message, pubKey, sigS, sigE) {
        const inArgs = [message, pubKey, sigS, sigE].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('schnorr_verify_signature', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async schnorrMultisigCreateMultisigPublicKey(privateKey) {
        const inArgs = [privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer128];
        const result = await this.wasm.callWasmExport('schnorr_multisig_create_multisig_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async schnorrMultisigValidateAndCombineSignerPubkeys(signerPubkeyBuf) {
        const inArgs = [signerPubkeyBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point, (0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('schnorr_multisig_validate_and_combine_signer_pubkeys', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async schnorrMultisigConstructSignatureRound1() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer128, index_js_2.Buffer128];
        const result = await this.wasm.callWasmExport('schnorr_multisig_construct_signature_round_1', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async schnorrMultisigConstructSignatureRound2(message, privateKey, signerRoundOnePrivateBuf, signerPubkeysBuf, roundOnePublicBuf) {
        const inArgs = [message, privateKey, signerRoundOnePrivateBuf, signerPubkeysBuf, roundOnePublicBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fq, (0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('schnorr_multisig_construct_signature_round_2', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async schnorrMultisigCombineSignatures(message, signerPubkeysBuf, roundOneBuf, roundTwoBuf) {
        const inArgs = [message, signerPubkeysBuf, roundOneBuf, roundTwoBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32, index_js_2.Buffer32, (0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('schnorr_multisig_combine_signatures', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async aesEncryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('aes_encrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async aesDecryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('aes_decrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async srsInitSrs(pointsBuf, numPoints, g2PointBuf) {
        const inArgs = [pointsBuf, numPoints, g2PointBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('srs_init_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async srsInitGrumpkinSrs(pointsBuf, numPoints) {
        const inArgs = [pointsBuf, numPoints].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('srs_init_grumpkin_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async examplesSimpleCreateAndVerifyProof() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('examples_simple_create_and_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async testThreads(threads, iterations) {
        const inArgs = [threads, iterations].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)()];
        const result = await this.wasm.callWasmExport('test_threads', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async commonInitSlabAllocator(circuitSize) {
        const inArgs = [circuitSize].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('common_init_slab_allocator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirGetCircuitSizes(constraintSystemBuf) {
        const inArgs = [constraintSystemBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_circuit_sizes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    async acirNewAcirComposer(sizeHint) {
        const inArgs = [sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = await this.wasm.callWasmExport('acir_new_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirNewGoblinAcirComposer() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = await this.wasm.callWasmExport('acir_new_goblin_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirDeleteAcirComposer(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_delete_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirCreateCircuit(acirComposerPtr, constraintSystemBuf, sizeHint) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_create_circuit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirInitProvingKey(acirComposerPtr, constraintSystemBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_init_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirCreateProof(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_create_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGoblinAccumulate(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_goblin_accumulate', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGoblinProve(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_goblin_prove', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirLoadVerificationKey(acirComposerPtr, vkBuf) {
        const inArgs = [acirComposerPtr, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_load_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirInitVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = await this.wasm.callWasmExport('acir_init_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    async acirGetVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGetProvingKey(acirComposerPtr, acirVec) {
        const inArgs = [acirComposerPtr, acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirVerifyProof(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGoblinVerifyAccumulator(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_goblin_verify_accumulator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGoblinVerify(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_goblin_verify', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirGetSolidityVerifier(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = await this.wasm.callWasmExport('acir_get_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirSerializeProofIntoFields(acirComposerPtr, proofBuf, numInnerPublicInputs) {
        const inArgs = [acirComposerPtr, proofBuf, numInnerPublicInputs].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = await this.wasm.callWasmExport('acir_serialize_proof_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    async acirSerializeVerificationKeyIntoFields(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr), index_js_2.Fr];
        const result = await this.wasm.callWasmExport('acir_serialize_verification_key_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
}
exports.BarretenbergApi = BarretenbergApi;
class BarretenbergApiSync {
    constructor(wasm) {
        this.wasm = wasm;
    }
    pedersenCommit(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = this.wasm.callWasmExport('pedersen_commit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHash(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHashes(inputsBuffer, hashIndex) {
        const inArgs = [inputsBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    pedersenHashBuffer(inputBuffer, hashIndex) {
        const inArgs = [inputBuffer, hashIndex].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('pedersen_hash_buffer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidonHash(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('poseidon_hash', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    poseidonHashes(inputsBuffer) {
        const inArgs = [inputsBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('poseidon_hashes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    blake2s(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32];
        const result = this.wasm.callWasmExport('blake2s', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    blake2sToField(data) {
        const inArgs = [data].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fr];
        const result = this.wasm.callWasmExport('blake2s_to_field_', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    schnorrComputePublicKey(privateKey) {
        const inArgs = [privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = this.wasm.callWasmExport('schnorr_compute_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    schnorrNegatePublicKey(publicKeyBuffer) {
        const inArgs = [publicKeyBuffer].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point];
        const result = this.wasm.callWasmExport('schnorr_negate_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    schnorrConstructSignature(message, privateKey) {
        const inArgs = [message, privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32, index_js_2.Buffer32];
        const result = this.wasm.callWasmExport('schnorr_construct_signature', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    schnorrVerifySignature(message, pubKey, sigS, sigE) {
        const inArgs = [message, pubKey, sigS, sigE].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('schnorr_verify_signature', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    schnorrMultisigCreateMultisigPublicKey(privateKey) {
        const inArgs = [privateKey].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer128];
        const result = this.wasm.callWasmExport('schnorr_multisig_create_multisig_public_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    schnorrMultisigValidateAndCombineSignerPubkeys(signerPubkeyBuf) {
        const inArgs = [signerPubkeyBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Point, (0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('schnorr_multisig_validate_and_combine_signer_pubkeys', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    schnorrMultisigConstructSignatureRound1() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer128, index_js_2.Buffer128];
        const result = this.wasm.callWasmExport('schnorr_multisig_construct_signature_round_1', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    schnorrMultisigConstructSignatureRound2(message, privateKey, signerRoundOnePrivateBuf, signerPubkeysBuf, roundOnePublicBuf) {
        const inArgs = [message, privateKey, signerRoundOnePrivateBuf, signerPubkeysBuf, roundOnePublicBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Fq, (0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('schnorr_multisig_construct_signature_round_2', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    schnorrMultisigCombineSignatures(message, signerPubkeysBuf, roundOneBuf, roundTwoBuf) {
        const inArgs = [message, signerPubkeysBuf, roundOneBuf, roundTwoBuf].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Buffer32, index_js_2.Buffer32, (0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('schnorr_multisig_combine_signatures', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    aesEncryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('aes_encrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    aesDecryptBufferCbc(input, iv, key, length) {
        const inArgs = [input, iv, key, length].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('aes_decrypt_buffer_cbc', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    srsInitSrs(pointsBuf, numPoints, g2PointBuf) {
        const inArgs = [pointsBuf, numPoints, g2PointBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('srs_init_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    srsInitGrumpkinSrs(pointsBuf, numPoints) {
        const inArgs = [pointsBuf, numPoints].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('srs_init_grumpkin_srs', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    examplesSimpleCreateAndVerifyProof() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('examples_simple_create_and_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    testThreads(threads, iterations) {
        const inArgs = [threads, iterations].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)()];
        const result = this.wasm.callWasmExport('test_threads', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    commonInitSlabAllocator(circuitSize) {
        const inArgs = [circuitSize].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('common_init_slab_allocator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirGetCircuitSizes(constraintSystemBuf) {
        const inArgs = [constraintSystemBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)(), (0, index_js_1.NumberDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_circuit_sizes', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
    acirNewAcirComposer(sizeHint) {
        const inArgs = [sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = this.wasm.callWasmExport('acir_new_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirNewGoblinAcirComposer() {
        const inArgs = [].map(index_js_1.serializeBufferable);
        const outTypes = [index_js_2.Ptr];
        const result = this.wasm.callWasmExport('acir_new_goblin_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirDeleteAcirComposer(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_delete_acir_composer', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirCreateCircuit(acirComposerPtr, constraintSystemBuf, sizeHint) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, sizeHint].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_create_circuit', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirInitProvingKey(acirComposerPtr, constraintSystemBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_init_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirCreateProof(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_create_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGoblinAccumulate(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_goblin_accumulate', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGoblinProve(acirComposerPtr, constraintSystemBuf, witnessBuf) {
        const inArgs = [acirComposerPtr, constraintSystemBuf, witnessBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_goblin_prove', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirLoadVerificationKey(acirComposerPtr, vkBuf) {
        const inArgs = [acirComposerPtr, vkBuf].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_load_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirInitVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [];
        const result = this.wasm.callWasmExport('acir_init_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return;
    }
    acirGetVerificationKey(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_verification_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGetProvingKey(acirComposerPtr, acirVec) {
        const inArgs = [acirComposerPtr, acirVec].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BufferDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_proving_key', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirVerifyProof(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_verify_proof', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGoblinVerifyAccumulator(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_goblin_verify_accumulator', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGoblinVerify(acirComposerPtr, proofBuf) {
        const inArgs = [acirComposerPtr, proofBuf].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.BoolDeserializer)()];
        const result = this.wasm.callWasmExport('acir_goblin_verify', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirGetSolidityVerifier(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.StringDeserializer)()];
        const result = this.wasm.callWasmExport('acir_get_solidity_verifier', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirSerializeProofIntoFields(acirComposerPtr, proofBuf, numInnerPublicInputs) {
        const inArgs = [acirComposerPtr, proofBuf, numInnerPublicInputs].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr)];
        const result = this.wasm.callWasmExport('acir_serialize_proof_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out[0];
    }
    acirSerializeVerificationKeyIntoFields(acirComposerPtr) {
        const inArgs = [acirComposerPtr].map(index_js_1.serializeBufferable);
        const outTypes = [(0, index_js_1.VectorDeserializer)(index_js_2.Fr), index_js_2.Fr];
        const result = this.wasm.callWasmExport('acir_serialize_verification_key_into_fields', inArgs, outTypes.map(t => t.SIZE_IN_BYTES));
        const out = result.map((r, i) => outTypes[i].fromBuffer(r));
        return out;
    }
}
exports.BarretenbergApiSync = BarretenbergApiSync;
//# sourceMappingURL=data:application/json;base64,